{% extends "base.html" %}
{% block title %}{% if is_wiki %}New Wiki Page{% else %}New Thread{% endif %}{% endblock %}

{% block content %}
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            {% if is_wiki %}
                <li class="breadcrumb-item"><a href="{{ url_for('forum.view_threads', is_wiki=1) }}">Wiki</a></li>
                <li class="breadcrumb-item active">New Page</li>
            {% else %}
                <li class="breadcrumb-item"><a href="{{ url_for('forum.view_threads') }}">Forum</a></li>
                <li class="breadcrumb-item active">New Thread</li>
            {% endif %}
        </ol>
    </nav>

    <div class="card">
        <div class="card-body">
            <h1 class="card-title">{% if is_wiki %}Create New Wiki Page{% else %}Create New Thread{% endif %}</h1>
            <form id="newThreadForm" method="POST">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                <input type="hidden" name="is_wiki" value="{{ '1' if is_wiki else '0' }}">
                
                <div class="form-group mb-3">
                    <label for="title">{% if is_wiki %}Page Title{% else %}Thread Title{% endif %}:</label>
                    <input type="text" id="title" name="title" 
                           class="form-control" required
                           maxlength="{{ Config.MAX_TITLE_LENGTH }}">
                    <small class="form-text text-muted">
                        Maximum {{ Config.MAX_TITLE_LENGTH }} characters
                        {% if is_wiki %}<br>Note: Page titles cannot be changed after creation{% endif %}
                    </small>
                </div>

                <div class="form-group mb-3">
                    <label for="group">Topic Group:</label>
                    <select id="group" name="group_id" class="form-select" required>
                        <option value="">Select a Group</option>
                        {% for group in groups %}
                            <option value="{{ group.id }}">{{ group.grouptext }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label for="category">Category:</label>
                    <select id="category" name="category_id" class="form-select" required disabled>
                        <option value="">Select a Group First</option>
                    </select>
                </div>
                
                <div class="form-group mb-3">
                    <label for="content">{% if is_wiki %}Page Content{% else %}First Post{% endif %}:</label>
                    <textarea id="content" name="content" 
                             class="form-control post-editor" required
                             rows="{% if is_wiki %}15{% else %}10{% endif %}"></textarea>
                    <div class="form-text text-muted">
                        {% if is_wiki %}
                            Supports Markdown formatting, images, and links.<br>
                            Use standard markdown links: [Link Text](https://example.com)<br>
                            For internal wiki links, use: [[Page Title]]
                        {% else %}
                            Supports Markdown and image paste
                        {% endif %}
                    </div>
                </div>
                
                {% if not is_wiki %}
                <div class="form-group mb-3">
                    <label for="userSearch">Add Users (Optional):</label>
                    <div class="user-search position-relative">
                        <input type="text" id="userSearch" 
                               class="form-control"
                               placeholder="Search users...">
                        <div id="userResults" 
                             class="user-results dropdown-menu w-100"></div>
                    </div>
                    <div id="selectedUsers" class="selected-users mt-2"></div>
                    <input type="hidden" id="userList" name="users">
                    <small class="form-text text-muted">
                        Thread will be private if users are selected
                    </small>
                </div>
                {% endif %}

                <button type="submit" class="btn btn-primary">
                    {% if is_wiki %}Create Page{% else %}Create Thread{% endif %}
                </button>
            </form>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
{% if not is_wiki %}
let selectedUsers = new Set();

async function searchUsers(query) {
    if (!query.trim()) {
        document.getElementById('userResults').classList.remove('show');
        return;
    }
    
    const response = await fetch(`/forum/api/search_users?q=${encodeURIComponent(query)}`);
    const users = await response.json();
    
    const resultsDiv = document.getElementById('userResults');
    if (users.length > 0) {
        resultsDiv.innerHTML = users
            .filter(user => user.id !== {{ session.user_id }})
            .filter(user => !selectedUsers.has(user.id))
            .map(user => `
                <button type="button" 
                        class="dropdown-item"
                        onclick="selectUser(${user.id}, '${user.username}')">
                    ${user.username}
                </button>
            `).join('');
        resultsDiv.classList.add('show');
    } else {
        resultsDiv.classList.remove('show');
    }
}

function selectUser(id, username) {
    if (selectedUsers.has(id)) return;
    
    selectedUsers.add(id);
    const selectedDiv = document.getElementById('selectedUsers');
    const userDiv = document.createElement('span');
    userDiv.className = 'selected-user badge bg-secondary me-2';
    userDiv.innerHTML = `
        ${username}
        <button type="button" 
                class="btn-close btn-close-white btn-sm"
                onclick="removeUser(${id}, this.parentElement)"></button>
    `;
    selectedDiv.appendChild(userDiv);
    updateUserList();
    
    document.getElementById('userSearch').value = '';
    document.getElementById('userResults').classList.remove('show');
}

function removeUser(id, element) {
    selectedUsers.delete(id);
    element.remove();
    updateUserList();
}

function updateUserList() {
    document.getElementById('userList').value = Array.from(selectedUsers).join(',');
}

// User search with debouncing
const userSearch = document.getElementById('userSearch');
if (userSearch) {
    userSearch.addEventListener('input', function(e) {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => searchUsers(e.target.value), 300);
    });

    // Hide results when clicking outside
    document.addEventListener('click', function(e) {
        if (!userSearch.contains(e.target)) {
            document.getElementById('userResults').classList.remove('show');
        }
    });
}
{% endif %}

// Handle group selection change - fetch categories for selected group
document.getElementById('group').addEventListener('change', async function() {
    const groupId = this.value;
    const categorySelect = document.getElementById('category');
    
    // Reset the category dropdown
    categorySelect.innerHTML = '<option value="">Select a Category</option>';
    
    if (!groupId) {
        categorySelect.disabled = true;
        return;
    }
    
    try {
        // Fetch categories for the selected group
        const response = await fetch(`/forum/api/categories/${groupId}`);
        if (!response.ok) throw new Error('Failed to fetch categories');
        
        const categories = await response.json();
        
        // Populate the category dropdown
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.category;
            categorySelect.appendChild(option);
        });
        
        // Enable the category dropdown
        categorySelect.disabled = false;
    } catch (error) {
        console.error('Error fetching categories:', error);
    }
});

// Image paste handling
document.getElementById('content').addEventListener('paste', async function(e) {
    const items = (e.clipboardData || e.originalEvent.clipboardData).items;
    
    for (let item of items) {
        if (item.type.indexOf('image') === 0) {
            e.preventDefault();
            
            const blob = item.getAsFile();
            const reader = new FileReader();
            
            reader.onload = function(event) {
                const img_data = event.target.result;
                const cursor = this.selectionStart;
                const text = this.value;
                
                this.value = text.substring(0, cursor) + 
                    `![Pasted image](${img_data})` +
                    text.substring(cursor);
            }.bind(this);
            
            reader.readAsDataURL(blob);
        }
    }
});
</script>
{% endblock %}
